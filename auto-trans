#!/usr/bin/env bash
# ------------------------------------------------------------
#  auto-trans  –  System-wide audio-/video-to-text wrapper
#  Usage: auto-trans <url|file_path> [additional whisper args]
#
#  This version fixes the “activate does not accept more than
#  one argument” error and adds a few safety improvements.
# ------------------------------------------------------------

set -euo pipefail         # fail hard, fail fast
IFS=$'\n\t'

# ────────────────────────────────────────────────────────────
# Configuration – adjust to match your setup
# ────────────────────────────────────────────────────────────
SCRIPT_DIR="/home/torchenv/workspace/threading/audio"
VENV_PATH="/home/torchenv/anaconda3"   # path that contains bin/activate
PYTHON_SCRIPT="transcribe.py"

DEFAULT_WORKERS=4
DEFAULT_MODEL="medium"
DEFAULT_LANGUAGE="zh"   # change to "en" or leave empty for auto-detect
DEFAULT_FORMAT=""       # leave empty for auto-selection, or e.g. "30232"

# ────────────────────────────────────────────────────────────
# Colours
# ────────────────────────────────────────────────────────────
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status()  { echo -e "${GREEN}[INFO]${NC} $1"; }
print_error()   { echo -e "${RED}[ERROR]${NC} $1" >&2; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# ────────────────────────────────────────────────────────────
# Helper functions
# ────────────────────────────────────────────────────────────
is_url()   { [[ "$1" =~ ^https?:// ]]; }
is_file()  { [[ -f "$1"           ]]; }

# ────────────────────────────────────────────────────────────
# 0. Arguments
# ────────────────────────────────────────────────────────────
if (( $# == 0 )); then
  print_error "Usage: auto-trans <url|file_path> [additional options]"
  exit 1
fi

INPUT="$1"; shift                    # keep rest in "$@"
USER_ARGS=("$@")                     # save for later

# ────────────────────────────────────────────────────────────
# 1. Validate INPUT
# ────────────────────────────────────────────────────────────
if is_url "$INPUT"; then
  print_status "Processing URL: $INPUT"
  INPUT_TYPE="url"
elif is_file "$INPUT"; then
  INPUT="$(realpath "$INPUT")"
  print_status "Processing local file: $INPUT"
  INPUT_TYPE="file"
  case "${INPUT,,}" in
    *.mp4|*.mp3|*.wav|*.m4a|*.aac|*.ogg|*.flac|*.webm|*.mkv|*.avi|*.mov)
      print_status "Supported audio/video format detected" ;;
    *) print_warning "Unknown extension – transcription will still be attempted" ;;
  esac
else
  print_error "Invalid input: must be a URL or existing file"; exit 1
fi

# ────────────────────────────────────────────────────────────
# 2. Sanity-check paths
# ────────────────────────────────────────────────────────────
[[ -d "$SCRIPT_DIR"    ]] || { print_error "SCRIPT_DIR not found: $SCRIPT_DIR"; exit 1; }
[[ -d "$VENV_PATH"     ]] || { print_error "VENV_PATH not found:  $VENV_PATH";  exit 1; }
[[ -f "$SCRIPT_DIR/$PYTHON_SCRIPT" ]] || {
  print_error "Python script not found: $SCRIPT_DIR/$PYTHON_SCRIPT"; exit 1; }

print_status "Starting transcription for: $INPUT"

cd "$SCRIPT_DIR"

# ────────────────────────────────────────────────────────────
# 3. Activate virtual environment safely
#    (prevent user args from reaching “activate”)
# ────────────────────────────────────────────────────────────
set --                    # clear positional params -> activate receives none
source "$VENV_PATH/bin/activate" || {
  print_error "Failed to activate virtual environment"; exit 1; }
set -- "${USER_ARGS[@]}"  # restore user args

# ────────────────────────────────────────────────────────────
# 4. Build Whisper CLI arguments
# ────────────────────────────────────────────────────────────
CMD_ARGS=(
  -w "$DEFAULT_WORKERS"
  -m "$DEFAULT_MODEL"
)

[[ -n "$DEFAULT_LANGUAGE" ]] && CMD_ARGS+=(-l "$DEFAULT_LANGUAGE")
if [[ "$INPUT_TYPE" == "url" && -n "$DEFAULT_FORMAT" ]]; then
  CMD_ARGS+=(-f "$DEFAULT_FORMAT")
fi

CMD_ARGS+=("$INPUT")        # the source
CMD_ARGS+=("${USER_ARGS[@]}")   # extra flags from caller

print_status "Running: python $PYTHON_SCRIPT ${CMD_ARGS[*]}"
python "$PYTHON_SCRIPT" "${CMD_ARGS[@]}"
EXIT_CODE=$?

if (( EXIT_CODE == 0 )); then
  print_status "Transcription completed successfully!"
  print_status "Content should now be in your clipboard."
else
  print_error "Transcription failed with exit code $EXIT_CODE"
fi

exit $EXIT_CODE
